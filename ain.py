# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(782, 436)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.stackedWidget = QtWidgets.QStackedWidget(self.frame)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.page)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_2 = QtWidgets.QFrame(self.page)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.page)
        self.frame_3.setMinimumSize(QtCore.QSize(300, 416))
        self.frame_3.setMaximumSize(QtCore.QSize(310, 416))
        self.frame_3.setStyleSheet("background-color: rgb(161, 161, 161);\n"
"border-radius: 10px")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.label = QtWidgets.QLabel(self.frame_3)
        self.label.setGeometry(QtCore.QRect(30, 100, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit.setGeometry(QtCore.QRect(30, 130, 221, 31))
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:4px")
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.frame_3)
        self.label_2.setGeometry(QtCore.QRect(110, 30, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(21)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit_2.setGeometry(QtCore.QRect(30, 220, 221, 31))
        self.lineEdit_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:4px")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_3 = QtWidgets.QLabel(self.frame_3)
        self.label_3.setGeometry(QtCore.QRect(30, 190, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(self.frame_3)
        self.pushButton.setGeometry(QtCore.QRect(90, 280, 121, 31))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet("background-color: rgb(19, 161, 255);\n"
"border-radius:4px")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_2.setGeometry(QtCore.QRect(110, 360, 75, 23))
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.lineEdit_2.raise_()
        self.lineEdit.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.horizontalLayout.addWidget(self.frame_3)
        self.frame_4 = QtWidgets.QFrame(self.page)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout.addWidget(self.frame_4)
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.page_2)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_5 = QtWidgets.QFrame(self.page_2)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_2.addWidget(self.frame_5)
        self.frame_7 = QtWidgets.QFrame(self.page_2)
        self.frame_7.setMinimumSize(QtCore.QSize(400, 0))
        self.frame_7.setMaximumSize(QtCore.QSize(400, 416))
        self.frame_7.setStyleSheet("background-color: rgb(138, 138, 138);")
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame_7)
        self.lineEdit_3.setGeometry(QtCore.QRect(50, 110, 301, 31))
        self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:4px")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_4 = QtWidgets.QLabel(self.frame_7)
        self.label_4.setGeometry(QtCore.QRect(50, 80, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame_7)
        self.lineEdit_4.setGeometry(QtCore.QRect(50, 180, 301, 31))
        self.lineEdit_4.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:4px")
        self.lineEdit_4.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_5 = QtWidgets.QLabel(self.frame_7)
        self.label_5.setGeometry(QtCore.QRect(50, 150, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.frame_7)
        self.lineEdit_5.setGeometry(QtCore.QRect(50, 250, 291, 31))
        self.lineEdit_5.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:4px")
        self.lineEdit_5.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_6 = QtWidgets.QLabel(self.frame_7)
        self.label_6.setGeometry(QtCore.QRect(50, 220, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_3.setGeometry(QtCore.QRect(130, 320, 131, 31))
        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_3.setStyleSheet("background-color: rgb(19, 161, 255);\n"
"border-radius:4px")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_7 = QtWidgets.QLabel(self.frame_7)
        self.label_7.setGeometry(QtCore.QRect(150, 30, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(21)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.pushButton_7 = QtWidgets.QPushButton(self.frame_7)
        self.pushButton_7.setGeometry(QtCore.QRect(160, 370, 75, 23))
        self.pushButton_7.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_7.setStyleSheet("\n"
"background-color:transparent")
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_4.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.lineEdit_4.raise_()
        self.lineEdit_3.raise_()
        self.lineEdit_5.raise_()
        self.pushButton_3.raise_()
        self.label_7.raise_()
        self.pushButton_7.raise_()
        self.horizontalLayout_2.addWidget(self.frame_7)
        self.frame_6 = QtWidgets.QFrame(self.page_2)
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_2.addWidget(self.frame_6)
        self.stackedWidget.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.page_3)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.frame_8 = QtWidgets.QFrame(self.page_3)
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_3.addWidget(self.frame_8)
        self.frame_9 = QtWidgets.QFrame(self.page_3)
        self.frame_9.setMinimumSize(QtCore.QSize(400, 0))
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_9)
        self.pushButton_4.setGeometry(QtCore.QRect(260, 240, 121, 31))
        self.pushButton_4.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_4.setStyleSheet("background-color: rgb(19, 161, 255);\n"
"border-radius:4px")
        self.pushButton_4.setObjectName("pushButton_4")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.frame_9)
        self.lineEdit_6.setGeometry(QtCore.QRect(20, 240, 201, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.lineEdit_6.setFont(font)
        self.lineEdit_6.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius:4px;\n"
"border: 1px solid black")
        self.lineEdit_6.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.lineEdit_6.setReadOnly(True)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_9)
        self.pushButton_5.setGeometry(QtCore.QRect(150, 320, 121, 31))
        self.pushButton_5.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_5.setStyleSheet("border-radius:4px;\n"
"background-color: rgb(11, 255, 39);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.label_8 = QtWidgets.QLabel(self.frame_9)
        self.label_8.setGeometry(QtCore.QRect(100, 20, 241, 41))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.frame_9)
        self.label_9.setGeometry(QtCore.QRect(30, 110, 331, 51))
        self.label_9.setWordWrap(True)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_3.addWidget(self.frame_9)
        self.frame_10 = QtWidgets.QFrame(self.page_3)
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_3.addWidget(self.frame_10)
        self.stackedWidget.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.page_4)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.frame_11 = QtWidgets.QFrame(self.page_4)
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.horizontalLayout_4.addWidget(self.frame_11)
        self.frame_12 = QtWidgets.QFrame(self.page_4)
        self.frame_12.setMinimumSize(QtCore.QSize(500, 416))
        self.frame_12.setMaximumSize(QtCore.QSize(600, 500))
        self.frame_12.setSizeIncrement(QtCore.QSize(0, 0))
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_12)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame_14 = QtWidgets.QFrame(self.frame_12)
        self.frame_14.setMaximumSize(QtCore.QSize(16777215, 100))
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_14)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_10 = QtWidgets.QLabel(self.frame_14)
        self.label_10.setText("")
        self.label_10.setWordWrap(True)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_4.addWidget(self.label_10)
        self.verticalLayout_3.addWidget(self.frame_14)
        self.frame_15 = QtWidgets.QFrame(self.frame_12)
        self.frame_15.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_15.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_15.setObjectName("frame_15")
        self.verticalLayout_3.addWidget(self.frame_15)
        self.horizontalLayout_4.addWidget(self.frame_12)
        self.frame_13 = QtWidgets.QFrame(self.page_4)
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.pushButton_6 = QtWidgets.QPushButton(self.frame_13)
        self.pushButton_6.setGeometry(QtCore.QRect(10, 30, 75, 23))
        self.pushButton_6.setStyleSheet("background-color: rgb(255, 0, 4);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.horizontalLayout_4.addWidget(self.frame_13)
        self.stackedWidget.addWidget(self.page_4)
        self.verticalLayout_2.addWidget(self.stackedWidget)
        self.verticalLayout.addWidget(self.frame)

        self.retranslateUi(Form)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Email Address"))
        self.label_2.setText(_translate("Form", "Login"))
        self.label_3.setText(_translate("Form", "Password"))
        self.pushButton.setText(_translate("Form", "Login"))
        self.pushButton.setShortcut(_translate("Form", "Return"))
        self.pushButton_2.setText(_translate("Form", "Sign up"))
        self.label_4.setText(_translate("Form", "Email Address"))
        self.label_5.setText(_translate("Form", "Password"))
        self.label_6.setText(_translate("Form", "Confirm password"))
        self.pushButton_3.setText(_translate("Form", "Sign Up"))
        self.pushButton_3.setShortcut(_translate("Form", "Return"))
        self.label_7.setText(_translate("Form", "Sign Up"))
        self.pushButton_7.setText(_translate("Form", "Back to login"))
        self.pushButton_4.setText(_translate("Form", "Select csv file"))
        self.pushButton_5.setText(_translate("Form", "Submit csv file"))
        self.label_8.setText(_translate("Form", "Upload CSV file"))
        self.label_9.setText(_translate("Form", "Ensure the csv file is well formatted\n"
"\n"
"Columns: Year, Month,Date, Rainfall\n"
""))
        self.pushButton_6.setText(_translate("Form", "Logout"))

        self.db = mysql.connector.connect(
                user='root',
                host='localhost',
                password='root'
        )

        self.mycursor = self.db.cursor()

        self.pushButton_2.clicked.connect(lambda x: self.stackedWidget.setCurrentWidget(self.page_2))
        self.pushButton_3.clicked.connect(self.pushButton_3_clicked)
        self.pushButton.clicked.connect(self.pushButton_clicked)
        self.pushButton_4.clicked.connect(self.pushButton_4_clicked)

        self.pushButton_5.clicked.connect(self.pushButton_5_clicked)
        self.percentage_bar_chart_cont = QGridLayout(self.frame_15)
        self.percentage_bar_chart_cont.setObjectName(u"percentage_bar_chart_cont")

        self.filepath = 'blank'

    def get_months_order(self, month):
        months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
        return_data = months[months.index(month)+1:]
        return_data.extend(months[:months.index(month)+1])

        return return_data

    def pushButton_5_clicked(self):
        if self.filepath != 'blank':
                try:
                        filepath = f"testing_data.csv"

                        df = pd.read_csv(filepath)
                        data = df.groupby('Month').mean()['Rainfall']
                        January = data.January
                        February = data.February
                        March = data.March
                        April = data.April
                        May = data.May
                        June = data.June
                        July = data.July
                        August = data.August
                        September = data.September
                        October = data.October
                        November = data.November
                        December = data.December

                        lastmonth = df.iloc[-1].Month

                        order = self.get_months_order(lastmonth)
                        plotting_data = []
                        for prediction in order:
                            if prediction == 'January':
                                    pickle_in = open('january_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[February, May, October]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'February':
                                    pickle_in = open('february_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[May, October]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'March':
                                    pickle_in = open('march_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[October, November, December]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'April':
                                    pickle_in = open('april_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[May, November, August, October]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'May':
                                    pickle_in = open('may_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[September, October, December]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'June':
                                    pickle_in = open('june_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[September, January, July, August]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'July':
                                    pickle_in = open('july_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[November, February, April]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'August':
                                    pickle_in = open('august_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[November, December, January, March]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'September':
                                    pickle_in = open('september_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[November, March, May]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'October':
                                    pickle_in = open('october_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[December, March, May]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'November':
                                    pickle_in = open('november_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[December, March, April, May]]))
                                    plotting_data.append(value[0])

                            elif prediction == 'December':
                                    pickle_in = open('december_prediction_model.pickle', 'rb')
                                    model = pickle.load(pickle_in)

                                    value = model.predict(np.array([[March, April, May, June]]))
                                    plotting_data.append(value[0])

                        for i in range(len(order)):
                            print(f'{order[i]}: {plotting_data[i]}')

                        # self.series = QtCharts.QLineSeries()
                        # print('Created series')
                        #
                        #
                        # for i in range(len(order)):
                        #         x = order[i]
                        #         y = plotting_data[i]
                        #         self.series.append(QPointF(i, y))
                        #
                        # print('Added data to series')


                        # self.chart = QtCharts.QChart()
                        # self.chart.legend().hide()
                        # self.chart.addSeries(self.series)
                        # self.chart.createDefaultAxes()
                        # self.chart.setTitle("Predicted rainfall for the next 12 months")
                        # print('Upto title')
                        #
                        #
                        # self.chartView = QtCharts.QChartView(self.chart)
                        # self.chartView.setRenderHint(QPainter.Antialiasing)
                        # print('Antialising')
                        #
                        #
                        # self.chart.setAnimationOptions(QtCharts.QChart.AllAnimations)
                        #
                        # self.chartView.chart().setTheme(QtCharts.QChart.ChartThemeDark)
                        # print('Dark theme')
                        #
                        #
                        # sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
                        # sizePolicy.setHorizontalStretch(0)
                        # sizePolicy.setVerticalStretch(0)
                        # sizePolicy.setHeightForWidth(self.chartView.sizePolicy().hasHeightForWidth())
                        # self.chartView.setSizePolicy(sizePolicy)
                        # print('Size')
                        #
                        # self.chartView.setMinimumSize(QSize(0, 300))
                        # self.percentage_bar_chart_cont.addWidget(self.chartView, 0, 0, 9, 9)
                        # print('Chartview')
                        #
                        # self.frame_15.setStyleSheet(u"background-color: transparent")
                        # print('Color')
                        # self.stackedWidget.setCurrentWidget(self.page_4)
                        # print('Finished')

                        set0 = QtCharts.QBarSet("Rainfall")
                        set0.append(plotting_data)

                        series = QtCharts.QPercentBarSeries()
                        series.append(set0)

                        chart = QtCharts.QChart()
                        chart.addSeries(series)
                        chart.setTitle("Prediction for the next 12 months")
                        chart.setAnimationOptions(QtCharts.QChart.SeriesAnimations)

                        categories = order
                        axis = QtCharts.QBarCategoryAxis()
                        axis.append(categories)
                        chart.createDefaultAxes()
                        chart.setAxisX(axis, series)

                        chart.legend().setVisible(True)
                        chart.legend().setAlignment(Qt.AlignBottom)

                        self.chart_view = QtCharts.QChartView(chart)
                        self.chart_view.setRenderHint(QPainter.Antialiasing)
                        self.chart_view.chart().setTheme(QtCharts.QChart.ChartThemeDark)
                        print('WHOAAA')

                        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
                        sizePolicy.setHorizontalStretch(0)
                        sizePolicy.setVerticalStretch(0)
                        sizePolicy.setHeightForWidth(self.chart_view.sizePolicy().hasHeightForWidth())
                        self.chart_view.setSizePolicy(sizePolicy)
                        self.chart_view.setMinimumSize(QSize(0, 300))
                        self.percentage_bar_chart_cont.addWidget(self.chart_view, 0, 0, 9, 9)
                        self.frame.setStyleSheet(u"background-color: transparent")

                        self.stackedWidget.setCurrentWidget(self.page_4)




                except:
                        msg = QMessageBox()
                        msg.setWindowTitle("Success")
                        msg.setIcon(QMessageBox.Warning)
                        msg.setText("The csv you provided is not in the correct format \n"
                                    "or has less data. Please select a csv file with \n"
                                    "at least 12 months of data")
                        x = msg.exec_()

        else:
                msg = QMessageBox()
                msg.setWindowTitle("Success")
                msg.setIcon(QMessageBox.Warning)
                msg.setText("Please select a well formatted csv file")
                x = msg.exec_()


            # average_data = df.pivot('Year', 'Month', 'Rainfall').mean()
            # average_data.str.replace(' Average', '')

    def pushButton_4_clicked(self):
            fileDialog = QFileDialog()
            fileDialog.setNameFilter("CSV files (*.csv)")
            self.filepath, _ = fileDialog.getOpenFileName(Form, "Select CSV file", "",
                                                          "CSV files (*.csv)")
            self.lineEdit_6.setText(os.path.basename(self.filepath))

    def pushButton_clicked(self):
            self.mycursor.execute('SELECT password FROM drought_prediction.users WHERE email_address = %s;',
                                  (self.lineEdit.text(),))
            password = [i for i in self.mycursor][0][0]

            if password == self.lineEdit_2.text():
                    # msg = QMessageBox()
                    # msg.setWindowTitle("Success")
                    # msg.setIcon(QMessageBox.Information)
                    # msg.setText("Login successfully")
                    # x = msg.exec_()
                    self.stackedWidget.setCurrentWidget(self.page_3)
            else:
                    msg = QMessageBox()
                    msg.setWindowTitle("Success")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setText("Incorrect email or password")
                    x = msg.exec_()
                    self.stackedWidget.setCurrentWidget(self.page)

    def pushButton_3_clicked(self):
            if (self.lineEdit_3.text() != '') and (self.lineEdit_4.text() != '') and (
                    self.lineEdit_4.text() == self.lineEdit_5.text()):
                    try:
                            self.mycursor.execute('INSERT INTO drought_prediction.users values(%s, %s);',
                                                  (self.lineEdit_3.text(), self.lineEdit_4.text()))
                            self.db.commit()
                            msg = QMessageBox()
                            msg.setWindowTitle("Success")
                            msg.setIcon(QMessageBox.Information)
                            msg.setText("Account created successfully")
                            x = msg.exec_()
                            self.stackedWidget.setCurrentWidget(self.page)
                    except:
                            msg = QMessageBox()
                            msg.setWindowTitle("Error")
                            msg.setIcon(QMessageBox.Warning)
                            msg.setText("An unexpected error occrred. Please try again")
                            x = msg.exec_()
            elif self.lineEdit_3.text() == '':
                    msg = QMessageBox()
                    msg.setWindowTitle("WARNING")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setText("Please provide an email address")
                    x = msg.exec_()
            elif self.lineEdit_4.text() != self.lineEdit_5.text():
                    msg = QMessageBox()
                    msg.setWindowTitle("WARNING")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setText("Passwords do not match")
                    x = msg.exec_()

            elif self.lineEdit_4.text() == '':
                    msg = QMessageBox()
                    msg.setWindowTitle("WARNING")
                    msg.setIcon(QMessageBox.Warning)
                    msg.setText("Please provide a password")
                    x = msg.exec_()

import mysql.connector
from PyQt5.QtWidgets import QMessageBox, QFileDialog
import os
import pandas as pd
import numpy as np
import pickle
from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *

from PyQt5 import QtCore, QtGui, QtWidgets
from PySide2 import *
from PySide2.QtCharts import QtCharts
from PyQt5.QtChart import QChart, QBarSet, QBarSeries, QBarCategoryAxis

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
